package com.chinadaily.adapter

import android.graphics.Color
import android.graphics.drawable.GradientDrawable
import android.support.v4.util.Pools
import android.support.v4.view.PagerAdapter
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import com.bumptech.glide.Priority
import com.chinadaily.R
import com.chinadaily.data.NewsBean
import com.chinadaily.http.HttpConstants
import com.chinadaily.utils.GlideApp
import kotlinx.android.synthetic.main.adapter_view_pager.view.*


class HeaderPagerAdapter : PagerAdapter() {
    private var images = mutableListOf<NewsBean>()
    private val background by lazy { GradientDrawable(GradientDrawable.Orientation.TOP_BOTTOM, intArrayOf(Color.TRANSPARENT, Color.parseColor("#cc000000"))) }
    fun refreshData(data: List<NewsBean>) {
        this.images.clear()
        this.images.addAll(data)
    }

    private val pool: Pools.SynchronizedPool<View> = Pools.SynchronizedPool(5)
    override fun instantiateItem(container: ViewGroup, position: Int): Any {
        val itemView = pool.acquire()
                ?: LayoutInflater.from(container.context).inflate(R.layout.adapter_view_pager, container, false)
        val data = images[position]
        itemView.pagerTitle.typeface = TF1
        itemView.pagerTitle.text = data.title
        itemView.pagerTitle.background = background
        val imgUrl = HttpConstants.SERVICE_URL + data.bigTitleImage
        GlideApp.with(itemView.pagerImg)
                .load(imgUrl)
                .priority(Priority.HIGH)
                .placeholder(R.drawable.news_big_default)
                .error(R.drawable.news_big_default)
                .centerCrop()
                .into(itemView.pagerImg)
        container.addView(itemView)
        return itemView
    }

    override fun getCount(): Int = images.size

    override fun isViewFromObject(view: View, `object`: Any): Boolean = view === `object`

    override fun destroyItem(container: ViewGroup, position: Int, any: Any) {
        val itemView = any as View
        container.removeView(itemView)
        pool.release(itemView)
    }
}
